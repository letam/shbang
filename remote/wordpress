#!/usr/bin/env bash

# Remotely set up Wordpress website, connecting it to (external) MySQL server

usage() {
	>&2 echo "Usage: $0 WEBSITE_NAME WP_DEST [DB_DEST]"
	exit 1
}
argc=$#
(( argc < 2 || argc > 3 )) && usage

website_name="$1" ; shift
wp_dest="$1" ; shift
db_dest="$1" ; shift
[[ $db_dest = "" ]] && db_dest=$wp_dest

sbin=$(dirname $0)/../sbin

[[ $website_name =~ @ ]] \
	&& >&2 echo "Invalid website name." && usage
! $sbin/is-valid-connection-value $wp_dest \
	&& >&2 echo "Invalid connection value for Wordpress server." && usage
! $sbin/is-valid-connection-value $db_dest \
	&& >&2 echo "Invalid connection value for database server." && usage


source "$(dirname "$0")/../setup/versions"
#echo $mysql_version


mysql_port=3306

min_mem_size_for_combined_server=1536000


## Check whether to set up connection to local MySQL server
if [[ $db_dest = $wp_dest ]]; then
	if ! ssh $wp_dest "command -v mysqld >/dev/null"; then
		server_mem_size=$(ssh $wp_dest "head -1 < /proc/meminfo | cut -f2 -d: | tr -s ' ' | cut -f2 -d' '")
		if (( server_mem_size > min_mem_size_for_combined_server )); then
			echo "INFO [$(date)]: Will set up Wordpress website connected to MySQL database server on same host..."
			$(dirname $0)/install-program mysqld $wp_dest --now
		else
			>&2 echo "Error: Server is too small to contain both Wordpress web app and MySQL server with default settings."
			exit 1
		fi
	fi
else
	echo "INFO [$(date)]: Begin provision of Wordpress website connected to MySQL database server on separate host..."
	if ! ssh $db_dest "command -v mysqld >/dev/null"; then
			$(dirname $0)/install-program mysqld $db_dest --now
	fi
fi


## Get values for server hosts
if [[ $db_dest != $wp_dest ]]; then
	### Get private IP address values of DB server and Wordpress server
	wordpress_host=$(ssh $wp_dest "private-ip" | cut -f1 -d/)
	if [[ $wordpress_host = "" ]]; then
		>&2 echo "Error: Cannot retrieve private IP of Wordpress server."
		exit 1
	fi

	mysql_host=$(ssh $db_dest "private-ip" | cut -f1 -d/)
	if [[ $mysql_host = "" ]]; then
		>&2 echo "Error: Cannot retrieve private IP of MySQL server."
		exit 1
	fi
else
	wordpress_host=localhost
	mysql_host=localhost
fi


## Generate MySQL credentials for new database for Wordpress site
sql_friendly_name=$(echo $website_name | tr "." "_")
db_name="wp_$sql_friendly_name"
db_user="$db_name"
db_password="$(randpw)"
db_password_escaped=$db_password
if grep -q "[\$]" <<< $db_password; then
	db_password_escaped=$(echo $db_password | sed "s/\\$/\\\\$/g;")
fi


## Create database on MySQL server
echo "INFO: Creating database on MySQL server..."
ssh $db_dest "

	if command -v dnf >/dev/null; then
		mysql_root_pw=\$(cat ~/.credentials/mysql_root_pw)
		mysql=\"mysql -uroot -p\$mysql_root_pw\"
	elif command -v apt >/dev/null; then
		mysql='sudo mysql'
	fi

	\$mysql -e \"
		CREATE DATABASE $db_name
			DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
		CREATE USER '$db_user'@'$wordpress_host'
			IDENTIFIED WITH caching_sha2_password BY '$db_password_escaped';
		GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, INDEX
			ON $db_name.* TO '$db_user'@'$wordpress_host';
		FLUSH PRIVILEGES;
		\" 2>/tmp/mysql-error
	test \$? != 0 && >&2 cat /tmp/mysql-error && exit 1

	### Confirm database exists
	if ! \$mysql -Bse 'SHOW SCHEMAS;' \
		2>/dev/null | grep -q $db_name
	then
		>&2 echo 'Error: Database was not created.'
		exit 1
	fi
	echo 'INFO: Database '$db_name' was created!'

	### Confirm that user can connect from private IP address of Wordpress server
	if ! \$mysql -Bse 'SELECT Host, User FROM mysql.user;' \
		2>/dev/null | grep $db_user | grep -q $wordpress_host
	then
		>&2 echo 'Error: User was not created.'
		exit 1
	fi
	echo 'INFO: MySQL user '$db_user'@'$wordpress_host' was created!'
	"
test $? != 0 && >&2 echo "Failed... ðŸ˜”" && exit 1
echo "Success!"


## Transfer values for MySQL database connection credentials to Wordpress server
echo "INFO: Transfer MySQL database connection credentials to Wordpress server"
ssh $wp_dest "
	if [[ ! -d ~/.credentials ]]; then
		mkdir -vp ~/.credentials
		chmod -v 700 ~/.credentials
	fi
	if [[ ! -d ~/.credentials/mysql ]]; then
		mkdir -vp ~/.credentials/mysql
		chmod -v 700 ~/.credentials/mysql
	fi
	echo \"INFO: Saving credentials for database to file: '~/.credentials/mysql/$db_name'\"
	cat >> ~/.credentials/mysql/$db_name <<-EOF
		# Credentials for MySQL server
		db_host=$mysql_host
		db_name=$db_name
		db_user=$db_user
		db_password='$db_password_escaped'
		EOF
	"


if [[ $db_dest != $wp_dest ]]; then
	echo "INFO: Allow MySQL client connections from private IP address of Wordpress server"
	echo "INFO: Add firewall rule to allow connections from '$wordpress_host' to '$mysql_host:$mysql_port'..."
	ssh $db_dest "sudo firewall-add-rule $mysql_port $wordpress_host"
fi


## Confirm that we can query MySQL server from Wordpress server
echo "INFO: Checking status of connection to MySQL server from Wordpress server..."
ssh $wp_dest "

	## Install MySQL client if not found
	if ! command -v mysql >/dev/null; then
		printf \"INFO: Installing MySQL client on Wordpress host...\"
		if command -v dnf >/dev/null; then
			install_mysql=\"sudo dnf install -y mysql\"
		elif command -v apt >/dev/null; then
			sudo apt update
			install_mysql=\"sudo apt install -y mysql-client-core-$mysql_version\"
		fi
		[[ -d /var/log/setup/install ]] || sudo mkdir -vp /var/log/setup/install
		\$install_mysql \
			2>&1 | sudo tee /var/log/setup/install/mysql
		echo \" DONE! [\$(date)]\"
	fi

	source ~/.credentials/mysql/$db_name
	if ! mysql -h\$db_host -u\$db_user -p\"\$db_password\" \$db_name -e 'status' 2>/tmp/mysql-error
	then
		>&2 cat /tmp/mysql-error
		exit 1
	fi
	"
test $? != 0 && exit 1
echo "Success!"


## Run setup script on remote server
echo "INFO [$(date)]: Executing script to set up Wordpress site on server... ðŸš€"
$(dirname $0)/setup-web wordpress $website_name $wp_dest --now

