#!/usr/bin/env php
<?php
/**
 * Generate a random string, using a cryptographically secure
 * pseudorandom number generator (random_int)
 *
 * Source: https://stackoverflow.com/questions/4356289/php-random-string-generator/31107425#31107425
 *
 * This function uses type hints now (PHP 7+ only), but it was originally
 * written for PHP 5 as well.
 *
 * For PHP 7, random_int is a PHP core function
 * For PHP 5.x, depends on https://github.com/paragonie/random_compat
 *
 * @param int $length		How many characters do we want?
 * @param string $keyspace	A string of all possible characters to select from
 * @return string
 */

define("ALPHANUMERIC",
	"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
);
define("SPECIAL_CHARS",
	"!@#$%^&*()"
);
define("KEYSPACE", ALPHANUMERIC . SPECIAL_CHARS);

function random_str(int $length = 64, string $keyspace = KEYSPACE): string {
	if ($length < 1) {
		throw new \RangeException("Length must be a positive integer.");
	}
	$pieces = [];
	$max = mb_strlen($keyspace, "8bit") - 1;
	$has_special_char = false;
	for ($i = 0; $i < $length; ++$i) {
		$pieces []= $keyspace[random_int(0, $max)];
		if (strpos(SPECIAL_CHARS, $pieces[$i]) !== false) {
			$has_special_char = true;
		}
	}
	if (!$has_special_char) {
		$pieces[random_int(0, $length)] =
			SPECIAL_CHARS[random_int(0, mb_strlen(SPECIAL_CHARS, "8bit") - 1)];
	}
	return implode("", $pieces);
}

if (PHP_SAPI === "cli") {
	$length = $argc > 1 ? $argv[1] : 16;
	echo random_str($length) . PHP_EOL;
}

