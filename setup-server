#!/usr/bin/env bash

# Sets up a basic secure web server
## Includes: firewall, secure SSH settings, sudo user, updates, cronjobs


# Args

while [[ $# -gt 0 ]]; do
	case "$1" in
		-h|--host) host="$2"; shift; shift;;
		-u) user="$2"; shift; shift;;
		-i) ssh_key="$2"; shift; shift;;
		-k|--authorized_keys) authorized_keys="$2"; shift; shift;;
		-p|--port) port="$2"; shift; shift;;
		-n|--new_user) new_user="$2"; shift; shift;;
		-*|*) echo "Unknown option: $1" >&2; exit 1;;
	esac
done

if [[ "" = "$host" ]]; then
	>&2 echo "Error: Argument for host required."
	exit 1
fi

[[ "" != "$port" ]] || port=22
[[ "" != "$user" ]] || user=root

if [[ "" != "$authorized_keys" ]]; then
	if ! grep -q "^ssh-rsa " <<< "$authorized_keys"; then
		>&2 echo "Error: value for authorized keys argument is invalid."
		>&2 echo "Received value of:"
		>&2 echo '```'
		>&2 echo "$authorized_keys"
		>&2 echo '```'
		>&2 echo "Please check how keys are being passed and try again."
		exit 1
	fi
fi


# Main

## Construct command to send via SSH, to be run immediately on a bash-compatible shell
## WARNING: To avoid possible errors, script contents substituted into the command should not contain single quotes (')!

command="
echo \"INFO [\$(date)]: Begin SSH command.\"
"

### Command arguments
command+="
# Arguments
user='$user'
authorized_keys='$authorized_keys'
new_user='$new_user'
"

### Transfer utility scripts for system administration
sbin_script_files=(
	tmst		# Return current timestamp (UTC) in a filename-friendly form
	bak 		# Backup file while including date created
	add-sudoer	# Quickly add password-less sudo users
	reboot.sh	# Reboot system after writing log
	on-poweron	# Cronjob script to execute upon system poweron (includes logging)
	os-name		# Return OS name of current system
	chdirgroup	# Recursively update group owner of directory
	randpw		# Generate a random password
	cp-app-files	# Copy app files to remote server
	remove-swap	# Remove swap space from system
)
for file in "${sbin_script_files[@]}"; do
	script=$(<"./sbin/$file")
	command+="
echo '$script' | sudo tee /usr/local/sbin/$file >/dev/null
sudo chmod +x /usr/local/sbin/$file
if test -f /etc/centos-release; then
	sudo ln -s /usr/local/sbin/$file /usr/sbin
fi
"
done


### Add on-poweron script as entry to system crontab
command+="
file=/usr/local/sbin/on-poweron
if ! grep -q \"\$file\" /etc/crontab; then
	sudo bak /etc/crontab
	echo 'INFO: Add on-poweron script to crontab...'
	echo \"@reboot		root	\$file\" | sudo tee -a /etc/crontab >/dev/null
fi
"

### Create directory to log system power cycles
command+="
sudo mkdir -v /var/log/power-state
"

### Ensure that logs for systemd-journald (journalctl) persists across system reboots
### # Reference: `man systemd-journald.service`
command+="
if [[ ! -d /var/log/journal ]]; then
	echo 'INFO: Enabling persistent journal logs.'
    sudo mkdir -vp /var/log/journal
    echo 'INFO: Setting correct permissions on /var/log/journal...'
    sudo systemd-tmpfiles --create --prefix /var/log/journal
    sudo systemctl restart systemd-journald
fi
"

### Create directories to hold scripts and logs for initial setup
command+="
sudo mkdir -vp /usr/local/setup /var/log/setup
"

### Transfer script that will secure server, to execute immediately
command+="
echo '$(<./setup/secure-server)' | sudo tee /usr/local/setup/secure-server >/dev/null
"

### Transfer script of updates for server to self-execute later
command+="
echo '$(<./setup/update-server)' | sudo tee /usr/local/setup/update-server >/dev/null
"

### Log information about arguments provided to script
command+="
if [[ '' != \"\$authorized_keys\" ]]; then
	echo 'INFO: SSH public keys provided to be transferred.' \
		| sudo tee /var/log/setup/secure-server
	echo 'INFO: SSH password authentication will be disabled.' \
		| sudo tee /var/log/setup/secure-server
else
	echo 'INFO: No SSH keys provided.' \
		| sudo tee /var/log/setup/secure-server
fi
if [[ '' != \"\$new_user\" ]]; then
	echo 'INFO: New user \"$new_user\" will be created.' \
		| sudo tee /var/log/setup/secure-server
fi
if [[ 'root' != \"\$user\" || '' != \"\$new_user\" ]]; then
	echo 'INFO: Root user SSH login will be disabled.' \
		| sudo tee /var/log/setup/secure-server
fi
"

### Commence server-side script execution
command+="
sudo bash /usr/local/setup/secure-server \
	-k \"\$authorized_keys\" \
	-u \"\$user\" \
	-n \"\$new_user\" \
	2>&1 | sudo tee /var/log/setup/secure-server

echo \"INFO [\$(date)]: End SSH command.\"
"

## Execute command on target server

if [[ "" != "$ssh_key" ]]; then
	ssh -i "$ssh_key" -p "$port" "$user@$host" "$command"
else
	ssh -p "$port" "$user@$host" "$command"
fi

