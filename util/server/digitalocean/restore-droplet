#!/usr/bin/env bash

# Restore or rebuild Digital Ocean droplet to specified image

usage() {
	>&2 echo "Usage: $0 DROPLET_NAME IMAGE_NAME [--rebuild]"
	exit 1
}
argc=$#
(( argc < 2 || argc > 3 )) && usage

droplet_name=$1 ; shift
image_name=$1 ; shift
rebuild=$1 ; shift
# TODO: Update script to check for actual '--rebuild' argument


droplet_id=$(doctl compute droplet list \
	| tail -n +2 | grep -E -m1 "^[0-9]+\s+$droplet_name\s" | cut -f 1 -d" ")
test "$droplet_id" = "" && >&2 echo "Droplet not found." && exit 1


image_id=$(doctl compute image list --public \
	| tail -n +2 | tac | grep -w -m1 "$image_name" | cut -f 1 -d" ")
test "$image_id" = "" && >&2 echo "Image not found." && exit 1


if [[ $rebuild != "" ]]; then
	action=rebuild
else
	action=restore
fi

echo -n "Confirm $action droplet ID $droplet_id using image ID $image_id (y/n): "
read -r response
test ${response:-n} = y || exit


## Construct command
command="doctl compute droplet-action $action $droplet_id"

### Specify image id
if [[ $action = rebuild ]]; then
	command+=" --image "
else
	command+=" --image-id "
fi
command+="$image_id"


if [[ $action = build && -f ~/.credentials/ssh_public_key_fingerprint ]]; then
   command+=" --ssh-keys $(cat ~/.credentials/ssh_public_key_fingerprint)"
fi

eval $command

