#!/usr/bin/env bash

# Setup and secure server
# - sets up log directories for system setup and stats
# - enables firewall allowing only SSH connections
# - enables automatic security updates to system
# - writes SSH authorized keys if provided, and then disables SSH password auth
# - creates sudo user with authorized keys, if spcified
# - disables SSH login as root user if another user is present


if [[ $(id -u) != 0 ]]; then echo "Error: Must be run as sudo/root." ; exit 1; fi


# Auxiliary functions

backup_file() { cp -p "$1" "$1.bak.$(date -u +%Y-%m-%d-%H%M%S)"; }
has_dnf() { command -v dnf >/dev/null; }
has_apt() { command -v apt >/dev/null; }
is_centos() { [[ -f /etc/centos-release ]]; }
is_ubuntu() { [[ $(head -1 /etc/os-release) = 'NAME="Ubuntu"' ]]; }


# Args

while [[ $# -gt 0 ]]; do
	case "$1" in
		-k|--authorized_keys) authorized_keys="$2"; shift; shift;;
		-u|--user) user="$2"; shift; shift;;
		-n|--new_user) new_user="$2"; shift; shift;;
		-*|*) echo "Unknown option: $1" >&2; exit 1;;
	esac
done


# Main


# Create directory to log setup information
mkdir -v /var/log/setup 2>/dev/null


# Log time of script start
echo "INFO: __BEGIN__: $(tmst)"
touch /var/log/setup/secure-server.0


# Create directories to capture system stats
mkdir -v /var/log/stats /var/log/stats/uname /var/log/stats/df /var/log/stats/df-h


# Capture initial stats
uname -a > /var/log/stats/uname/0
df > /var/log/stats/df/0
df -h > /var/log/stats/df-h/0
if command -v rpm >/dev/null; then
	mkdir -v /var/log/stats/kernel
	rpm -q --last kernel | sudo tee /var/log/stats/kernel/0
elif [[ -f /run/motd.dynamic ]]; then
	mkdir -v /var/log/stats/motd
	cat /run/motd.dynamic > /var/log/stats/motd/0
fi


# Transfer SSH keys
if [[ "" != "$authorized_keys" ]]; then

	echo "INFO: Writing SSH public keys..."
	mkdir -v ~/.ssh
	chmod 700 ~/.ssh
	if [[ -f ~/.ssh/authorized_keys ]]; then
		 backup_file ~/.ssh/authorized_keys
	fi
	echo "$authorized_keys" > ~/.ssh/authorized_keys
	if grep -q " ssh-rsa " ~/.ssh/authorized_keys; then
		# Ensure that individual keys are separated by a line break, in case the line breaks were lost during input processing
		sed -i "s/ ssh-rsa /\nssh-rsa /g" ~/.ssh/authorized_keys
	fi

	echo "INFO: Disabling SSH password authentication..."
	if grep -q -E "^PasswordAuthentication yes" /etc/ssh/sshd_config; then
		file=/etc/ssh/sshd_config
		backup_file $file
		sudo sed -i -E "s/(^PasswordAuthentication) yes/\1 no/" $file
		sudo systemctl reload sshd
	elif grep -q -E "#?PasswordAuthentication yes" /etc/ssh/sshd_config; then
		file=/etc/ssh/sshd_config
		backup_file $file
		sudo sed -i -E "s/#?(PasswordAuthentication) yes/\1 no/" $file
		sudo systemctl reload sshd
	fi
	if ! grep -q -E "^PasswordAuthentication no" /etc/ssh/sshd_config; then
		file=/etc/ssh/sshd_config
		backup_file $file
		echo "PasswordAuthentication no" >> /etc/ssh/sshd_config
		sudo systemctl reload sshd
	fi

else
	echo "INFO: No SSH authorized_keys provided."
fi


# Add sudo user, with provided SSH keys
if [[ "" != "$new_user" ]]; then
	echo "INFO: Adding user."
	sudo add-sudoer -u "$new_user" -k "$authorized_keys" 2>&1 | sudo tee -a /var/log/setup/add-sudoer.log
else
	echo "INFO: No user added."
fi


# Disallow root login via SSH if another user is present
if [[ "root" != "$user" || "" != "$new_user" ]]; then
	echo "INFO: Ensuring that SSH login as root is disabled..."
	if grep -q -E "^PermitRootLogin yes" /etc/ssh/sshd_config; then
		echo "INFO: Updating /etc/ssh/sshd_config: -> PermitRootLogin no"
		file=/etc/ssh/sshd_config
		sudo bak /etc/ssh/sshd_config
		#sudo sed --in-place -E "s/(^PermitRootLogin) yes/\1 prohibit-password/" $file
		sudo sed --in-place -E "s/(^PermitRootLogin) yes/\1 no/" $file
		sudo systemctl reload sshd
	fi
	if ! grep -q -E "^PermitRootLogin no" /etc/ssh/sshd_config; then
		echo "INFO: Updating /etc/ssh/sshd_config: -> PermitRootLogin no"
		file=/etc/ssh/sshd_config
		sudo bak /etc/ssh/sshd_config
		echo "PermitRootLogin no" >> /etc/ssh/sshd_config
		sudo systemctl reload sshd
	fi
fi


# Enable Firewall
if has_dnf; then
	if ! command -v firewalld >/dev/null; then
		echo "INFO: Installing firewalld service."
		sudo dnf install -y firewalld && echo >/dev/null
	fi
	if ! sudo systemctl list-unit-files | grep enabled | grep -q firewalld; then
		echo "INFO: Enabling firewalld service."
		sudo systemctl enable firewalld
	fi
	#if ! systemctl -q is-active firewalld; then
	if ! sudo systemctl | grep running | grep -q firewalld; then
		echo "INFO: Starting firewalld service."
		sudo systemctl start firewalld
	fi
	if ! sudo firewall-cmd --list-services | grep -q "ssh"; then
		echo "INFO: Open SSH port in firewalld."
		sudo firewall-cmd --permanent --add-service=ssh
		sudo firewall-cmd --reload
	fi
elif command -v ufw >/dev/null; then
	echo "INFO: Enable firewall and open SSH port."
	sudo ufw allow "OpenSSH"
	echo y | sudo ufw enable
fi


# Ensure cron service is enabled and started
cron_service=$(systemctl list-unit-files | grep -m1 -E "crond?" -o)
if ! systemctl list-unit-files --state=enabled | grep -q "$cron_service"; then
	sudo systemctl enable "$cron_service"
fi
if ! systemctl -q is-active "$cron_service"; then
	sudo systemctl start "$cron_service"
fi


# Enable automatic security updates on system
echo "INFO: Configure automatic security updates on system."
if has_dnf; then
	# TODO: Look into throttling download speeds when downloading automatic updates
	sudo dnf install -y dnf-automatic
	sudo bak /etc/dnf/automatic.conf
	sudo sed -i -E "
		s|(upgrade_type = )default|\1security|;
		s|(apply_updates = )no|\1yes|;
		s|(emit_via = )stdio|\1email,stdio,motd|;
		" /etc/dnf/automatic.conf
	if [[ $HOSTNAME != "" ]]; then
		sudo sed -i -E " s|(email_from = root@)example.com|\1$HOSTNAME|" \
			/etc/dnf/automatic.conf
	fi
	sudo systemctl enable --now dnf-automatic.timer
elif has_apt; then
	# Reference: https://wiki.debian.org/UnattendedUpgrades
	if ! command -v unattended-upgrades >/dev/null; then
		sudo apt install -y unattended-upgrades
	fi
	## Activate unattended-upgrades
	if [[ ! -f /etc/apt/apt.conf.d/20auto-upgrades ]]; then
		cat > /etc/apt/apt.conf.d/20auto-upgrades <<-EOT
			APT::Periodic::Update-Package-Lists "1";
			APT::Periodic::Unattended-Upgrade "1";
		EOT
	fi
fi


# Log time of script end
touch /var/log/setup/secure-server.1
echo "INFO: __END__: $(tmst)"

