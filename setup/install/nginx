#!/usr/bin/env bash

# Ensure Nginx is installed and serving a website


[[ $(id -u) != 0 ]] && echo "Error: Must be run as sudo/root." && exit 1


source "$(dirname "$0")/../versions"
#echo $ubuntu_release


is_centos() {
	[[ -f /etc/centos-release ]]
}


# Install Nginx web server (and proxy server) application
#* Reference: https://www.nginx.com/resources/wiki/start/topics/tutorials/install/
if ! command -v nginx >/dev/null; then
	if is_centos; then
		## Set to use official Nginx yum package repository for latest stable release
		releasever=8
		basearch=x86_64
		sudo tee /etc/yum.repos.d/nginx.repo > /dev/null <<-EOF
			[nginx]
			name=nginx repo
			baseurl=https://nginx.org/packages/centos/$releasever/$basearch/
			gpgcheck=0
			enabled=1
			EOF
		## Enable the module stream for latest Nginx version
		sudo dnf module reset -y nginx
		latest_stream=$(dnf module list nginx | grep "^nginx\s" | tail -1 | cut -f2 -d" ")
		sudo dnf module enable -y nginx:$latest_stream

		sudo dnf install -y nginx nginx-module-njs

	elif command -v apt >/dev/null; then
		## Set to use official Nginx apt package repository for latest stable release
		release=$ubuntu_release
		sudo tee /etc/apt/sources.list.d/nginx.list >/dev/null <<-EOF
			deb https://nginx.org/packages/ubuntu/ $release nginx
			deb-src https://nginx.org/packages/ubuntu/ $release nginx
			EOF
		## Update GPG keys to verify software signatures of Nginx packages
		curl -O https://nginx.org/keys/nginx_signing.key \
			&& sudo apt-key add ./nginx_signing.key && rm ./nginx_signing.key

		sudo apt update || exit 1
		sudo apt install -y nginx nginx-module-njs
	fi
else
	echo "Nginx is already installed."
fi


if ! systemctl list-unit-files | grep enabled | grep -q nginx; then
	echo "Enabling nginx service."
	sudo systemctl enable nginx
fi
#if ! systemctl -q is-active nginx; then
if ! systemctl | grep running | grep -q nginx; then
	echo "Starting nginx service."
	sudo systemctl start nginx
fi


# SELinux (Security) settings for permissions regarding serving HTTP content
# # @note Got information about settings to change via:
# # $(grep denied /var/log/audit/audit.log | audit2why)
if command -v setsebool >/dev/null; then

	# Allow httpd to unified
	# Note: Needed for wordpress
	sudo setsebool -P httpd_unified 1

	# Allow httpd to read user content
	# Note: Needed for wordpress
	sudo setsebool -P httpd_read_user_content 1

	# Allow httpd to can network connect
	# (Allow HTTPD scripts and modules to connect to the network)
	sudo setsebool -P httpd_can_network_connect 1

	# Allow nis to enabled
	sudo setsebool -P nis_enabled 1

#	# Allow httpd to enable homedirs
#	#sudo setsebool -P httpd_enable_homedirs 1

fi


# Set firewall rules for ports for HTTP and HTTPS
if command -v firewall-cmd >/dev/null; then
	#sudo firewall-cmd --zone=public --add-service=http --permanent
	#sudo firewall-cmd --zone=public --add-service=https --permanent
	sudo firewall-cmd --set-default-zone=dmz
	sudo firewall-cmd --zone=dmz --add-interface=eth0
	sudo firewall-cmd --zone=dmz --add-service=http --permanent
	sudo firewall-cmd --zone=dmz --add-service=https --permanent
	sudo firewall-cmd --reload
elif command -v ufw >/dev/null; then
	sudo ufw allow http
	sudo ufw allow https
fi


# Ensure the log directory is part of the "adm" group for good read access
sudo chdirgroup /var/log/nginx adm


# Nginx Configuration

sudo bak /etc/nginx/nginx.conf


## Configure static file compression

### Create module for gzip compression settings
sudo tee /etc/nginx/conf.d/gzip.conf >/dev/null <<-EOF

	gzip		on;
	gzip_types	text/plain text/css application/javascript application/json text/xml application/xml+rss;
	gzip_min_length	1400;
	gzip_static	on;
	EOF

### Disable gzip settings in main config file
if grep -q "^\sgzip[ _]" /etc/nginx/nginx.conf; then
	sed -i -E "s/^([ \t\]+gzip.*;)/#\1/" /etc/nginx/nginx.conf
fi


## Set max size of request from client
if [[ ! -f /etc/nginx/conf.d/client.conf ]] || \
	! grep -q client_max_body_size /etc/nginx/conf.d/client.conf
then
	sudo tee -a /etc/nginx/conf.d/client.conf >/dev/null <<-"EOF"

	client_max_body_size 5M;
	EOF
fi


## Set Nginx config to process configs in the same way across different platforms

### Set Nginx config to load files in sites-enabled directory
if ! grep -q "^\s*include\s/etc/nginx/sites-enabled/\*;" /etc/nginx/nginx.conf; then
	test -d /etc/nginx/sites-enabled || sudo mkdir -v /etc/nginx/sites-enabled
	sed -i -E "s|([^i]+)(include .*/conf\.d/\*\.conf;)|\1\2\n\1include /etc/nginx/sites-enabled/*;|" /etc/nginx/nginx.conf
fi


### Extract and copy default server config blocks into its own file (on CentOS/RHEL)
(
	src_file=/etc/nginx/nginx.conf
	dst_file=/etc/nginx/conf.d/default.conf

	if grep -q -E "^[ \t]*server {" $src_file \
		&& grep -q -E "^[ \t]+listen .*default_server;" $src_file
	then

		block_end_symbol="}"

		# Get each starting block (one for http, the other for https)

		## Set word boundaries as we process file contents
		IFS_0="$IFS"
		IFS=""

		block_start_line_nums=$(grep -n -E "^[ \t\#]*server {" $src_file | cut -f1 -d:)
		while read block_start_line_num; do
			### Ignore content in file before the first line of the block
			content_crop_at_line_num=$(tail -n +$block_start_line_num $src_file)

			### Get opening line indent in order to find end of block and num of lines
			line_indent=$(echo $content_crop_at_line_num | head -1 | sed -E "s|^([ \t\#]*).*$|\1|")
			block_num_of_lines=$(echo $content_crop_at_line_num \
				| grep -n -E "^$line_indent$block_end_symbol" \
				| cut -f1 -d:)

			### Get content block to write to new file
			content_block=$(echo $content_crop_at_line_num | head -n $block_num_of_lines)
			echo -e "\n\n$content_block" | sudo tee -a $dst_file >/dev/null
		done <<< $(echo $block_start_line_nums)

		## Reset word boundaries
		IFS="$IFS_0"


		# Format/clean new file

		## De-indent the lines
		indent_string=$(cat $dst_file \
			| grep -E "^[ \t]+" | head -1 | sed -E "s|(^[ \t]+).*$|\1|")
		sudo sed -i -E "s|^(#?)$indent_string(.*)|\1\2|" $dst_file

		## Trim leading blank lines of file
		lines_to_trim=0
		while read line; do
			if [[ $line != "" ]]; then
				break
			fi
			((++lines_to_trim))
		done <<< $(cat $dst_file)
		sudo sed -i "1,${lines_to_trim}d" $dst_file


		# Disable each active server block in /etc/nginx/nginx.conf

		## Set word boundaries as we process file contents
		IFS_0="$IFS"
		IFS=""

		active_block_start_line_nums=$(grep -n -E "^[ \t]*server {" $src_file | cut -f1 -d:)
		while read line_num; do
			### Ignore content in file before the first line of the block
			content_crop_at_line_num=$(tail -n +$line_num $src_file)

			### Get opening line indent in order to find ending line number
			line_indent=$(echo $content_crop_at_line_num | head -1 | sed -E "s|^([ \t\#]*).*$|\1|")
			block_num_of_lines=$(echo $content_crop_at_line_num \
				| grep -n -E "^$line_indent$block_end_symbol" \
				| cut -f1 -d:)
			line_num_end=$((line_num + block_num_of_lines - 1))

			### Comment lines to disable
			 sudo sed -i -E "$line_num,$line_num_end s/(.*)/#\1/" $src_file
		done <<< $(echo $active_block_start_line_nums)

		## Reset word boundaries
		IFS="$IFS_0"

	fi
)


### Update default server config
(
	file=/etc/nginx/conf.d/default.conf
	backup=$file.bak.$(date -u +%Y-%m-%d-%H%M%S)
	sudo cp $file $backup
	root_dir=$(grep -m1 "^\s*root\s" $file | sed "s/^\s*//")

	### Relocate root directory setting outside of location block
	if grep -m1 "^        root" $file; then
		line_to_delete=$(grep -n -m1 "^\s*root\s" $file | cut -f1 -d:)
		sed -i -e "${line_to_delete}d" $file
		sed -i -E "s|^(\s*server_name .*)|\1\n    $root_dir|" $file
	fi

	### Load configuration files in default.d/*.conf if directory exists
	if [[ -d /etc/nginx/default.d ]]; then
		if ! grep -q '^    include /etc/nginx/default.d/\*.conf;' $file; then
			sed -i -E "s|^(    $root_dir)|\1\n\n    # Load configuration files for the default server block.\n    include /etc/nginx/default.d/*.conf;|" $file
		fi
	fi

	[[ $(diff $file $backup) = "" ]] && sudo rm $backup
)


# Reload nginx service to update configuration settings
if systemctl is-system-running >/dev/null; then
	sudo systemctl reload nginx
elif service nginx status >/dev/null; then
	sudo service nginx reload
else
	sudo service nginx start
fi

