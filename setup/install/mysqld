#!/usr/bin/env bash

# Install MySQL Database Server and automate steps to secure installation

[[ $(id -u) != 0 ]] && >&2 echo "Error: Must be run as sudo/root." && exit 1


## Install MySQL daemon service and enable it
if ! command -v mysqld >/dev/null; then
	if command -v dnf >/dev/null; then
		sudo dnf install -y mysql-server
	elif command -v apt >/dev/null; then
		sudo apt install -y mysql-server
	fi
	sudo systemctl enable --now mysqld
fi
systemctl status -l --no-pager mysqld

### Add user to mysql group for read access to database server logs
sudo usermod -aG mysql $SUDO_USER


## Secure database server for deployment

### Create root password for MySQL and store it in file
pw_file="/home/$SUDO_USER/.credentials/mysql_root_pw"
if [[ ! -f $pw_file ]]; then
	if [[ ! -d /home/$SUDO_USER/.credentials ]]; then
		sudo -u $SUDO_USER mkdir -vp /home/$SUDO_USER/.credentials
	fi
	echo "rootPassword1@localhost" | sudo -u $SUDO_USER tee $pw_file >/dev/null
fi
mysql_root_pw=$(cat $pw_file)

### Ensure expect is installed
if ! command -v expect >/dev/null; then
	echo "Installing expect..."
	if command -v dnf >/dev/null; then
		sudo dnf install -y expect
	elif command -v apt >/dev/null; then
		sudo apt install -y expect
	fi
fi

### Automate mysql_secure_installation
expect -f - <<EOF

spawn mysql_secure_installation

expect {
	"Would you like to setup VALIDATE PASSWORD component?" {
		expect "Press y|Y for Yes, any other key for No: "
		send "y\r"
		expect "Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: "
		send "0\r"
		exp_continue
	}
	"Please set the password for root here." {
		expect "New password: "
		send "$mysql_root_pw\r"

		expect "Re-enter new password: "
		send "$mysql_root_pw\r"

		expect "Do you wish to continue with the password provided?"
		send "y\r"
	}
	"Enter password for user root:" {
		send "$mysql_root_pw\r"
		expect "Change the password for root ?"
		send "\r"
	}
}

expect "Remove anonymous users? "
send "y\r"

expect "Disallow root login remotely? "
send "y\r"

expect "Remove test database and access to it? "
send "y\r"

expect "Reload privilege tables now? "
send "y\r"

expect eof
EOF


### Password settings

#### Backup /var/lib/mysql/mysqld-auto.cnf file
[[ -f /var/lib/mysql/mysqld-auto.cnf ]] && sudo bak /var/lib/mysql/mysqld-auto.cnf

#### Set minimum password length
password_length=16
echo "Set minimum password length to $password_length..."
mysql -uroot -p$mysql_root_pw -e "
	SET PERSIST validate_password.length = $password_length;
	" 2>/dev/null

#### Do not require multiple character types in passwords
validate_password_policy=$(
	mysql -uroot -p$mysql_root_pw -Bse " SELECT @@GLOBAL.validate_password.policy;" \
		2>/dev/null
	)
if [[ $validate_password_policy != LOW ]]; then
	mysql -uroot -p$mysql_root_pw -e "SET PERSIST validate_password.policy = 'LOW';" 2>/dev/null
	if [[ $? = 0 ]]; then
		echo "Set validate_password.policy = 'LOW'"
	else
		>&2 echo "Error: Did not successfully set validate_password.policy."
	fi
fi

#### Note: To display records for MySQL server system variables starting with 'validate':
#mysql -uroot -p$mysql_root_pw -e "SHOW VARIABLES LIKE 'validate%';"


### Bind address to allow connections to private IP address of machine only

if grep -m1 "^bind-address\s*=\s*127.0.0.1" /etc/mysql/mysql.conf.d/mysqld.cnf; then
	bak /etc/mysql/mysql.conf.d/mysqld.cnf
	private_ip=$(cut -f1 -d/ <<< $(private-ip))
	sed -i -E "s/(^bind-address\s*=\s*127.0.0.1)/#\1\nbind-address = $private_ip/" \
		/etc/mysql/mysql.conf.d/mysqld.cnf
fi


#### Add rule to firewall
#* Currently not used. Instead, we open the firewall on a case-by-case basis
#* (i.e. we open up the MySQL server port for each IP address that requires access)

#sudo firewall-cmd --permanent --add-service=mysql
#sudo firewall-cmd --reload

