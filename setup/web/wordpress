#!/usr/bin/env bash

# Set up Wordpress website and serve with PHP-FPM and Nginx

[[ $(id -u) != 0 ]] && >&2 echo "Error: Must be run as sudo/root." && exit 1

# Arguments

domain=$1
if [[ $domain = "" ]]; then
	>&2 echo "Error: Argument for domain required."
	exit 1
fi


# Auxiliary functions

has_selinux() {
	command -v getenforce >/dev/null && [[ $(getenforce) = Enforcing ]]
}


# Dependencies

[[ ! -d /var/log/setup/install ]] && mkdir -vp /var/log/setup/install

## Install Perl if not found
if ! command -v perl >/dev/null; then
	printf "INFO: Installing Perl..."
	sudo $(dirname $0)/../install/perl
		2>&1 | tee /var/log/setup/install/perl >/dev/null
	echo " DONE! [$(date)]"
fi

## Install Nginx if not found
if ! command -v nginx >/dev/null; then
	printf "INFO: Installing Nginx..."
	sudo $(dirname $0)/../install/nginx \
		2>&1 | tee /var/log/setup/install/nginx >/dev/null
	echo " DONE! [$(date)]"
fi

## Install PHP if not found
if ! command -v php >/dev/null; then
	printf "INFO: Installing PHP..."
	sudo $(dirname $0)/../install/php
		2>&1 | tee /var/log/setup/install/php >/dev/null
	echo " DONE! [$(date)]"
fi

## Install MySQL client if not found
if ! command -v mysql >/dev/null; then
	printf "INFO: Installing MySQL..."
	if command -v dnf >/dev/null; then
		install_mysql="sudo dnf install -y mysql"
	elif command -v apt >/dev/null; then
		install_mysql="sudo apt install -y mysql-client"
	fi
	$install_mysql \
		2>&1 | tee /var/log/setup/install/mysql >/dev/null
	echo " DONE! [$(date)]"
fi


# Main

echo "INFO [$(date)]: Begin Wordpress setup."


## Set variables for paths of interest
project_dir=/var/www/$domain
html_dir=/var/www/$domain/html
nginx_conf=/var/www/$domain/nginx.conf


if [[ -d $project_dir ]]; then
	>&2 echo "Error: Project directory '$project_dir' already exists. Aborting."
	exit 1
fi


## Set up database connection, either to external server or create one on localhost

sql_friendly_name=$(echo $domain | tr "." "_")
db_name="wp_$sql_friendly_name"

create_database() {
	[[ ! -d /var/log/setup/db ]] && mkdir -vp /var/log/setup/db
	su - $SUDO_USER -c "\"$(dirname $0)\"/../db/mysql $db_name" \
		2>&1 | sudo tee /var/log/setup/db/mysql--$db_name
	if test ${PIPESTATUS[0]} != 0; then
		>&2 echo "INFO [$(date)]: Setup failed! ðŸ˜§" && exit 1
	fi
}

### Database server credentials
db_credentials_file=/home/$SUDO_USER/.credentials/mysql/$db_name
if [[ -f $db_credentials_file ]]; then
	echo "INFO: Retrieving database credentials from file: '$db_credentials_file'"
elif command -v mysqld >/dev/null; then
	### If mysqld is found locally, then create locally-hosted MySQL database
	echo "INFO: Creating database on local MySQL server..."
	create_database
else
	>&2 echo "Error: No credentials found for database server."
	exit 1
fi


## Set up HTML website
$(dirname $0)/html $domain
test $? != 0 && >&2 echo "INFO [$(date)]: Setup failed! ðŸ˜§" && exit 1


## Install Wordpress

### Download latest version of Wordpress
### (re-download if cached archive is older than 6 hours)

downloads_dir=/home/$SUDO_USER/downloads
[[ ! -d $downloads_dir ]] && mkdir -v $downloads_dir
cd $downloads_dir

if [[ ! -f wordpress.tgz || $(find -name wordpress.tgz -mmin +$((60*6)) | wc -l) -gt 0 ]]; then
	curl --output wordpress.tgz -L "https://wordpress.org/latest.tar.gz"
fi

### Extract Wordpress archive and place contents in project html directory
echo "Extracting files from archive..."
tar -zxf wordpress.tgz
if [[ -d $html_dir ]]; then
	mv -v "$html_dir" "$html_dir".bak.$(date -u +%Y-%m-%d-%H%M%S)
fi
mv -v wordpress "$html_dir"

cd -


## Add 50x and 404 files
echo "Error" > "$html_dir/50x.html"
echo "Not found" > "$html_dir/404.html"


## Set correct permissions on files
if command -v dnf >/dev/null; then
	php_fpm_group=apache
elif command -v apt >/dev/null; then
	php_fpm_group=www-data
fi
echo "Execute: chown -R $SUDO_USER:$php_fpm_group $html_dir"
sudo chown -R "$SUDO_USER:$php_fpm_group" "$html_dir"
sudo chmod -v g+w "$html_dir"

echo "Execute: chmod -R g+w $html_dir/wp-content"
sudo chmod -R g+w "$html_dir/wp-content"
sudo chmod -v g+s "$html_dir/wp-content"
sudo -u $SUDO_USER mkdir -vp "$html_dir/wp-content/uploads"
sudo chmod -v g+w "$html_dir/wp-content/uploads"

### SELinux file context for uploads directory
if has_selinux; then
	sudo chcon -vt httpd_sys_rw_content_t "$html_dir/wp-content/uploads"
fi


## Nginx Config
bak "$nginx_conf"
{
	tab=$(grep -m1 -E "^\s+.*" "$nginx_conf" | sed -E "s|^([ \t]+).*|\1|")

	## Set location blocks for php pages and wp-admin
	#perl -i -pe "BEGIN{undef $/;}
	perl -i -p0e "
		s|^(\s+location / \{)[^\}]*\}\n\
|\1
${tab}${tab}try_files \\\$uri \\\$uri/ /index.php\\\$is_args\\\$args;
${tab}}

${tab}location = /wp-admin/ {
${tab}${tab}rewrite (.*) /wp-admin/index.php;
${tab}}
|m" "$nginx_conf"

}
systemctl reload nginx


## Wordpress Configuration

## Automate the "famous five-minute WordPress installation"
echo -e "\nAutomate the \"famous five-minute WordPress installation\"..."
echo -e "\nSetting up wp-config.php..."

### Set SELinux file context to temporarily allow server app to write to system at website directory
if has_selinux; then
	sudo chcon -vt httpd_sys_rw_content_t "$html_dir"
	#* View file context of files in directory via: ls -l -Z "$html_dir"
fi


### Set database credentials

echo "Breathe, before sending first request to server..."
sleep 1  # Wait a sec for some breathing room
# TODO: Ping server before submitting any data.

echo "Set database credentials via POST request to /wp-admin/setup-config.php?step=2 ..."
source $db_credentials_file
password_encoded=$(php -r "echo urlencode('$db_password');")
curl -si "https://$domain/wp-admin/setup-config.php?step=2" \
	-XPOST \
	--data "dbname=$db_name&uname=$db_user&pwd=$password_encoded&dbhost=$db_host&prefix=wp_&&submit=Submit" \
	| head -1
# TODO: Investigate why setup for Ubuntu 20.04 fails here
if [[ ! -f $html_dir/wp-config.php ]]; then
	>&2 echo "INFO [$(date)]: Setup failed! ðŸ˜§" && exit 1
fi

#### Alternative method to set db credentials and authentication keys and salt
#cd $html_dir
#cp -vp wp-config-sample.php wp-config.php

##### Escape special characters in password before using in sed replacement
#db_password_escaped=$(echo $db_password | sed "s/&/\\\&/g")

##### Write to files
#sed -i -E "\
#    s|database_name_here|$db_name|;\
#    s|username_here|$db_user|;\
#    s|password_here|$db_password_escaped|;\
#    s|'localhost'|'$db_host'|;\
#    " wp-config.php

#### Set Authentication Unique Keys and Salts
#echo "Set Authentication Unique Keys and Salts..."

##### Get salt values
#link="$(grep "https:.*/salt" wp-config.php | sed -E "s|.*(https:.*/salt/?).*|\1|")"
#values="$(curl -L "$link")"

##### Set placeholder
#perl -i -p0e "s|define\( 'AUTH_KEY'.*NONCE_SALT[^;]+;|salt_values_go_here|ms" wp-config.php

##### Replace placeholder with salt values
#python3 -c "
#with open('wp-config.php') as f:
#    for x in f: print(
#        '''$values\n''' if x.startswith('salt_values_go_here') else x
#        ,end=''
#    )
#" >> wp-config.php.tmp

###### Alternative method to replace placeholder using bash:
##while IFS= read -r line; do
##    if [[ $line =~ ^salt_values_go_here ]]; then
##        echo "$values" >> wp-config.php.tmp
##    else
##        echo "$line" >> wp-config.php.tmp
##    fi
##done < wp-config.php

#mv wp-config.php.tmp wp-config.php
#cd - >/dev/null


### Update permissions on wp-config.php file
chmod 440 $html_dir/wp-config.php


### Create admin user on wordpress

website_title="$domain"
wp_user="root"
wp_user_password="$(randpw)"
wp_user_email="$wp_user@$domain"

### Store Wordpress user credentials in file
echo "Saving credentials for Wordpress admin user to file: $project_dir/credentials.txt"
cat >> $project_dir/credentials.txt <<-EOF

	# WORDPRESS
	website_title='$website_title'
	wp_user='$wp_user'
	wp_user_password='$wp_user_password'
	wp_user_email='$wp_user_email'

	EOF

echo "Create Wordpress admin user via POST request to /wp-admin/install.php?step=2 ..."
password_encoded=$(php -r "echo urlencode('$wp_user_password');")
curl -si "https://$domain/wp-admin/install.php?step=2" \
	-XPOST \
	-H "Content-Type: application/x-www-form-urlencoded" \
	--data "weblog_title=$website_title&user_name=$wp_user&admin_password=$password_encoded&admin_password2=$password_encoded&admin_email=$wp_user_email&Submit=Install+WordPress" \
	| head -1
test $? != 0 && >&2 echo "INFO [$(date)]: Setup failed! ðŸ˜§" && exit 1


### Restore SELinux default labels to disallow server app from writing to system at root website directory
if has_selinux; then
	sudo restorecon -v "$html_dir"
	#ls -lZ "$html_dir"
fi


## Allow wordpress to write to file system
echo "Update wp-config to allow Wordpress to write to filesystem to install plugins"
echo -e "\n\n/** Allow Wordpress app to write to filesystem, to install plugins **/\ndefine('FS_METHOD', 'direct');\n" >> $html_dir/wp-config.php


## Set SELinux permissions for wordpress to write to wp-content folder and descendants
if has_selinux; then
	sudo restorecon -v "$html_dir/wp-content"
	echo "Set SELinux file context for all files in $html_dir/wp-content/*"
	sudo restorecon -R "$html_dir/wp-content/*"
fi


echo "INFO [$(date)]: End of Wordpress setup!"

