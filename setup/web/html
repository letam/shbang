#!/usr/bin/env bash

# Set up a basic static (HTML-based) website and serve with Nginx


[[ $(id -u) != 0 ]] && >&2 echo "Error: Must be run as sudo/root." && exit 1

# Arguments

domain=$1
if [[ $domain = "" ]]; then
	>&2 echo "Error: Argument for domain required."
	exit 1
fi


# Auxiliary functions

is_centos() {
	[[ -f /etc/centos-release ]]
}
is_ubuntu() {
	[[ $(head -1 /etc/os-release) = 'NAME="Ubuntu"' ]]
}
has_selinux() {
	command -v getenforce >/dev/null && [[ $(getenforce) = Enforcing ]]
}


# Dependencies

[[ ! -d /var/log/setup/install ]] && mkdir -vp /var/log/setup/install

## Install Nginx if not found
if ! command -v nginx >/dev/null; then
	printf "INFO: Installing Nginx..."
	sudo $(dirname $0)/../install/nginx \
		2>&1 | tee /var/log/setup/install/nginx >/dev/null
	echo " DONE! [$(date)]"
fi

## Install Certbot if not found
if ! command -v certbot >/dev/null; then
	printf "INFO: Installing Certbot..."
	sudo $(dirname $0)/../install/certbot \
		2>&1 | tee /var/log/setup/install/certbot >/dev/null
	echo " DONE! [$(date)]"
fi


# Main

## Set variables for paths of interest
project_dir=/var/www/$domain
html_dir=/var/www/$domain/html
nginx_conf=/var/www/$domain/nginx.conf


## Create project folder
sudo mkdir -vp $project_dir

## Create html folder
sudo cp -pr /usr/share/nginx/html $html_dir

## Create nginx config
cat /etc/nginx/conf.d/default.conf \
	| sed -E "
		s|([ \t]+listen .*) default_server|\1|;
		s/(server_name[ \t]+)(_|localhost)/\1$domain/;
		s|([ \t]+root[ \t]+).*;$|\1$html_dir;|;
	" | sudo tee $nginx_conf >/dev/null

### Set up logging
sudo mkdir -vp /var/log/nginx/$domain
if ! grep -q '^\s*access_log' $nginx_conf; then
	sudo sed -i -E "s|^(([ \t]*)root .*)$|\1\n\n\
\2access_log   /var/log/nginx/$domain/access.log;\n\
\2error_log    /var/log/nginx/$domain/error.log;|
		" $nginx_conf
fi
## Add logrotate config
echo "Adding logrotate config..."
cat /etc/logrotate.d/nginx | sed -E " s|(/log/nginx/)(\*log)|\1$domain/\2|; " \
	| sudo tee /etc/logrotate.d/nginx-$domain >/dev/null

### Include www subdomain in config if domain is root
server_names=$domain
is_not_subdomain="test $(echo $domain | tr -dc "." | wc -c) -eq 1"
if $is_not_subdomain; then
	server_names+=" www.$domain"
	sudo sed -i -E "s|(server_name[ \t]+)$domain|\1$server_names|" $nginx_conf
fi

## Add config to directory of site configs, to enable
sudo ln -s $nginx_conf /etc/nginx/sites-enabled/$domain


## Reload nginx to apply settings thus far
sudo systemctl reload nginx


## SELinux settings
if has_selinux; then
	### Add SELinux label to allow Nginx to access nginx conf in project directory
	#* Deals with: SELinux is preventing /usr/sbin/nginx from open access on the file $project_dir/nginx.conf.
	#* $project_dir/nginx.conf default label should be httpd_sys_content_t
	sudo /sbin/restorecon -v $project_dir/nginx.conf

	### Add SELinux label to allow Nginx to access all files in project directory
	#* Deals with: SELinux is preventing /usr/sbin/nginx from getattr access on the file $project_dir/html/index.html.
	#* $project_dir/html/index.html default label should be httpd_sys_content_t.
	echo "Relabel $project_dir/html/* from unconfined_u:object_r:var_t:s0 to unconfined_u:object_r:httpd_sys_content_t:s0"
	sudo /sbin/restorecon -R $project_dir/html/*
	# TODO: Update (fine-tune) the labeling to apply only to HTML, CSS, JS, media
fi




## Generate SSL cert for HTTPS connections

ssl_domains=$(echo $server_names | tr " " ",")
if is_centos; then
	sudo certbot --nginx -n --agree-tos --register-unsafely-without-email --redirect --domains $ssl_domains --expand
elif is_ubuntu; then
	# Reference: https://certbot.eff.org/lets-encrypt/ubuntufocal-nginx

	#### Option 1: Generate certificates via standalone plugin (Requires server shutdown)
	#sudo systemctl stop nginx
	#sudo certbot certonly --standalone -n --agree-tos --register-unsafely-without-email --domains $ssl_domains --expand
	#sudo systemctl start nginx

	### Option 2: Generate certificates via webroot plugin (No server shutdown required)
	### Reference: https://github.com/wmnnd/nginx-certbot/blob/master/data/nginx/app.conf
	add_location_certbot_acme_challenge() {
		sudo sed -i -E "s|^((\s+)location / \{$)|\
\2location /.well-known/acme-challenge/ {\n\
\2\2root /var/www/certbot;\n\
\2}\n\
\n\
\1|
			" $nginx_conf
	}
	add_location_certbot_acme_challenge
	sudo systemctl reload nginx
	[ ! -d /var/www/certbot ] && mkdir -vp /var/www/certbot
	sudo certbot certonly --webroot --webroot-path /var/www/certbot -n --agree-tos --register-unsafely-without-email --domains $ssl_domains --expand
fi


### Set additional settings for certbot SSL connections on Ubuntu
set_nginx_ssl_conf() {

	### Disable listening to port 80 (HTTP)
	sed -i -E 's/(\s+listen\s+80;)/#\1/' $nginx_conf

	### Remove (temporarily) closing brace of server block
	sed -i 's/^\}//' $nginx_conf

	### Add code specifying SSL options
	cat >> $nginx_conf <<EOT
    #listen [::]:443 http2 ssl ipv6only=on; # managed by Certbot via setup/web/html
    listen 443 http2 ssl; # managed by Certbot via setup/web/html
    ssl_certificate /etc/letsencrypt/live/$domain/fullchain.pem; # managed by Certbot via setup/web/html
    ssl_certificate_key /etc/letsencrypt/live/$domain/privkey.pem; # managed by Certbot via setup/web/html
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot via setup/web/html
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot via setup/web/html

}
EOT

	### Set server block to redirect connections from HTTP to HTTPS
	cat >> $nginx_conf <<EOT
server {
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }


    if (\$host = $domain) {
        return 301 https://\$host\$request_uri;
    } # managed by Certbot via setup/web/html


    listen       80;
    listen       [::]:80;
    server_name  $domain;
    return 404; # managed by Certbot via setup/web/html
}
EOT

	if $is_not_subdomain; then
		#### Include www subdomain in server block if domain is root domain
		sed -i -E "
			s|(\s*if \(\\\$host = $domain\) \{)|\
    if \(\$host = www.$domain\) {\n\
        return 301 https://\$host\$request_uri;\n\
    } # managed by Certbot via setup/web/html\n\
\n\
\n\
\1|;
			s|(\s*server_name\s+$domain);|\1 www.$domain;|;
			" $nginx_conf
	fi

	sudo systemctl reload nginx
}

if is_ubuntu; then
	set_nginx_ssl_conf
fi

